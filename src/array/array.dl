
#pragma once

#include "../graph_definitions.dl"
#include "../type_inference.dl"
#include "../points_to.dl"
#include "../ir_type.dl"

inferred_type(alloc, $Array($Bottom())) :-
    vertex(alloc, "Allocation", _, _),
    edge(alloc, callee, _, "callee"),
    vertex(callee, "Symbol", _, "Array").

.decl array_allocation(id: number)

array_allocation(id) :-
    vertex(id, "Allocation", _, _),
    edge(id, callee, _, "callee"),
    vertex(callee, "Symbol", _, "Array").


.decl array_element_type(array: number, type: irType<>)

array_element_type(array, type) :-
    array_allocation(array),
    vertex(store, "Store", _, _),
    edge(store, array_ref, _, "object"),
    may_refer_to(array_ref, array),
    edge(store, value, _, "value"),
    inferred_type(value, type).

array_element_type(array, type) :-
    array_allocation(array),
    edge(array, _, _, "1"), // c'tor has more than one parameter
    edge(array, element, _, index),
    IS_NUMERIC(index),
    inferred_type(element, type).

array_element_type(array, $Undefined()) :-
    array_allocation(array),
    !edge(array, _, _, "1"), // c'tor has only one parameter
    edge(array, element, _, "0"),
    vertex(element, "Literal", _, value),
    IS_NUMERIC(value).

inferred_type(array, $Array(element_type)) :-
    array_element_type(array, element_type).

inferred_type(load, type) :-
    vertex(load, "Load", _, _),
    edge(load, array_ref, _, "object"),
    may_refer_to(array_ref, array),
    edge(load, property, _, "property"),
    vertex(property, vertex_kind, _, _),
    vertex_kind != "Symbol",
    array_element_type(array, type).

inferred_type(load, element_type) :-
    vertex(load, "Load", _, _),
    edge(load, array, _, "object"),
    inferred_type(array, array_type),
    edge(load, property, _, "property"),
    vertex(property, vertex_kind, _, _),
    vertex_kind != "Symbol",
    element_type = @getElementType(array_type).

inferred_type(array, $Array(element_type)) :-
    inferred_type(array, $Array($Bottom())),
    vertex(store, "Store", _, _),
    edge(store, array_ref, _, "object"),
    may_refer_to(array_ref, array),
    edge(store, value, _, "value"),
    inferred_type(value, element_type).

.decl typed_array(name: symbol, type: irType<>)
typed_array("Int8Array", $Array($Integer())).
typed_array("Uint8Array", $Array($Integer())).
typed_array("Int32Array", $Array($Integer())).
typed_array("Uint32Array", $Array($Integer())).
typed_array("Float32Array", $Array($Number())).
typed_array("Float64Array", $Array($Number())).

inferred_type(array, type) :-
    vertex(array, "Allocation", _, _),
    edge(array, callee, _, "callee"),
    vertex(callee, "Symbol", _, name),
    typed_array(name, type).

#include "array_method.dl"
