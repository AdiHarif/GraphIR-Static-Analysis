
#pragma once

.decl lib_method(lib: symbol, method: symbol, type: irType<>)

inferred_type(load, type) :-
    vertex(load, "Load", _, _),
    edge(load, property, _, "property"),
    vertex(property, "Symbol", _, method),
    edge(load, object, _, "object"),
    vertex(object, "Symbol", _, lib),
    lib_method(lib, method, type).

.decl refers_to_function(v: number, f: symbol)

refers_to_function(v, full_name) :-
    vertex(v, "Load", _, _),
    edge(v, function_id, _, "property"),
    vertex(function_id, "Symbol", _, method_name),
    edge(v, lib_id, _, "object"),
    vertex(lib_id, "Symbol", _, lib_name),
    lib_method(lib_name, method_name, _),
    full_name = cat(lib_name, cat("_", method_name)).

.decl lib_variable(lib: symbol, name: symbol, type: irType<>)

inferred_type(load, type) :-
    lib_variable(lib, name, type),
    vertex(load, "Load", _, _),
    edge(load, property, _, "property"),
    vertex(property, "Symbol", _, name),
    edge(load, object, _, "object"),
    vertex(object, "Symbol", _, lib).
