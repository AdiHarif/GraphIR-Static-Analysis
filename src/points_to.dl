
#pragma once

#include "graph_definitions.dl"

.decl may_refer_to(from: number, to: number)

may_refer_to(v, v) :- data_vertex(v).
may_refer_to(v, u) :- may_refer_to(v, w), may_refer_to(w, u).

may_refer_to(phi, v) :-
    vertex(phi, "Phi", _, _),
    edge(phi, v, "Data", _).

may_refer_to(call, ret_value) :-
    vertex(call, "Call", _, _),
    edge(call, symbol_vertex, _, "callee"),
    vertex(symbol_vertex, _, _, function),
    function_return(function, ret),
    edge(ret, ret_value, _, "value").

may_refer_to(parameter, argument) :-
    function_parameter(function, parameter, index),
    vertex(call, "Call", _, _),
    edge(call, symbol, _, "callee"),
    vertex(symbol, "Symbol", _, function),
    edge(call, argument, _, index).

may_refer_to(load, object) :-
    vertex(load, "Load", _, _),
    edge(load, containig_object_ref, _, "object"),
    may_refer_to(containig_object_ref, containig_object),
    points_to(containig_object, object, _),
    edge(load, property, _, "property"),
    vertex(property, property_kind, _, _),
    property_kind != "Symbol".

.decl points_to(pointer: number, pointee: number, field: symbol)

points_to(pointer, pointee, "*") :- // TODO: add field sensitivity
    vertex(store, "Store", _, _),
    edge(store, pointee_ref, _, "value"),
    edge(store, pointer_ref, _, "object"),
    vertex(pointer, "Allocation", _, _),
    vertex(pointee, "Allocation", _, _),
    may_refer_to(pointer_ref, pointer),
    may_refer_to(pointee_ref, pointee).

points_to(pointer, pointee, "*") :- // TODO: add field sensitivity
    vertex(pointer, "Allocation", _, _),
    vertex(pointee, "Allocation", _, _),
    may_refer_to(pointee, pointee_ref),
    edge(pointer, pointee_ref, "Data", _).
