
#include "graph_definitions.dl"
#include "points_to.dl"
#include "utilities.dl"
#include "ir_type.dl"

.decl numeric_operator(operator: symbol)
numeric_operator("+").
numeric_operator("-").
numeric_operator("*").

.decl float_operator(operator: symbol)
float_operator("/").

.decl integer_operator(operator: symbol)
integer_operator("%").
integer_operator(">>").
integer_operator(">>>").

.decl comparison_operator(operator: symbol)
comparison_operator("==").
comparison_operator("!=").
comparison_operator("<").
comparison_operator("<=").
comparison_operator(">").
comparison_operator(">=").

.decl boolean_operator(operator: symbol)
boolean_operator("&&").
boolean_operator("||").
boolean_operator("! (Prefix)").

.decl inferred_type(id: number, type: irType<>)
inferred_type(id, $Integer()) :-
    vertex(id, "Literal", _, value), IS_INTEGER(value).
inferred_type(id, $Number()) :-
    vertex(id, "Literal", _, value), IS_NUMERIC(value), !IS_INTEGER(value).
inferred_type(id, $String()) :-
    vertex(id, "Literal", _, value), IS_STRING(value).
inferred_type(id, $Boolean()) :-
    vertex(id, "Literal", _, value), IS_BOOLEAN(value).

inferred_type(id, $Number()) :-
    vertex(id, kind, _, operator), match(".*Operation", kind), float_operator(operator).
inferred_type(id, $Integer()) :-
    vertex(id, kind, _, operator), match(".*Operation", kind), integer_operator(operator).
inferred_type(id, arg_type) :-
    vertex(id, kind, _, operator), match(".*Operation", kind), numeric_operator(operator),
    edge(id, arg, _, _), inferred_type(arg, arg_type).



// inferred_type(id, type) :-
//     vertex(id, "Phi", _, _), inferred_type(arg, type),
//     (phi_args(id, arg, _) ; phi_args(id, _, arg)).

inferred_type(id, $Boolean()) :-
    vertex(id, "BinaryOperation", _, operator), comparison_operator(operator).

inferred_type(id, $Boolean()) :-
    vertex(id, kind, _, operator), match(".*Operation", kind), boolean_operator(operator).

inferred_type(id, $Symbol()) :- vertex(id, "Symbol", _, _).

inferred_type(id, type) :-
    vertex(id, "Parameter", _, _),
    function_parameter(function, id, index),
    function_parameters_type(function, index, type).

inferred_type(id, type) :-
    vertex(id, "Call", _, _),
    edge(id, symbol_id, _, "callee"), vertex(symbol_id, "Symbol", _, function),
    function_return_type(function, type).


inferred_type(id, type) :-
    may_refer_to(id, to), inferred_type(to, type).

function_return_type(function, $Void()) :-
    vertex(id, "Return", _, _),
    function_return(function, id),
    !edge(id, _, _, "value").

function_return_type(function, type) :-
    vertex(id, "Return", _, _),
    function_return(function, id),
    edge(id, value, _, "value"), inferred_type(value, type).

function_parameters_type(function, index, type) :-
    vertex(call, "Call", _, _),
    edge(call, parameter, _, index), IS_NUMERIC(index),
    inferred_type(parameter, type),
    edge(call, callee, _, "callee"), vertex(callee, "Symbol", _, function).

.decl missing_type(id: number)
missing_type(id) :-
    vertex(id, _, category, _),
    category != "Control",
    !inferred_type(id, _).

#include "libs/math.dl"
#include "libs/console.dl"
#include "libs/process.dl"
#include "libs/global.dl"
#include "libs/fs.dl"

#include "string_method.dl"

#include "accessors.dl"

.output inferred_type