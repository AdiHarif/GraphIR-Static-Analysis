
#pragma once

#include "ir_type.dl"
#include "type_inference.dl"

.decl global_variable_type(name: symbol, type: irType<>)

inferred_type(name, $UserDefined("Globals")) :-
    vertex(name, "Symbol", _, "_globals").

global_variable_type(name, $Undefined()) :-
    global_variable_type(name, _).

global_variable_type(name, type) :-
    vertex(store, "Store", _, _),
    edge(store, object, _, "object"),
    vertex(object, "Symbol", _, "_globals"),
    edge(store, property, _, "property"),
    vertex(property, "Symbol", _, name),
    edge(store, value, _, "value"),
    inferred_type(value, type).

inferred_type(load, type) :-
    vertex(load, "Load", _, _),
    edge(load, object, _, "object"),
    vertex(object, "Symbol", _, "_globals"),
    edge(load, property, _, "property"),
    vertex(property, "Symbol", _, name),
    global_variable_type(name, type).

may_refer_to(load, value) :-
    vertex(load, "Load", _, _),
    edge(load, object1, _, "object"),
    vertex(object1, "Symbol", _, "_globals"),
    edge(load, property1, _, "property"),
    vertex(property1, "Symbol", _, name),

    vertex(store, "Store", _, _),
    edge(store, object2, _, "object"),
    vertex(object2, "Symbol", _, "_globals"),
    edge(store, value, _, "value"),
    edge(store, property2, _, "property"),
    vertex(property2, "Symbol", _, name).


.decl global_variable(name: symbol, type_name: symbol)

global_variable(name, @irTypeToString(type)) :-
    global_variable_type(name, type).


