
#pragma once

#include "graph_definitions.dl"
#include "points_to.dl"
#include "utilities.dl"
#include "ir_type.dl"

.decl numeric_operator(operator: symbol)
numeric_operator("+").
numeric_operator("-").
numeric_operator("*").
numeric_operator("++").
numeric_operator("--").

.decl float_operator(operator: symbol)
float_operator("/").

.decl integer_operator(operator: symbol)
integer_operator("%").
integer_operator("<<").
integer_operator(">>").
integer_operator(">>>").
integer_operator("^").
integer_operator("|").
integer_operator("&").

.decl comparison_operator(operator: symbol)
comparison_operator("==").
comparison_operator("===").
comparison_operator("!=").
comparison_operator("!==").
comparison_operator("<").
comparison_operator("<=").
comparison_operator(">").
comparison_operator(">=").

.decl boolean_operator(operator: symbol)
boolean_operator("&&").
boolean_operator("||").
boolean_operator("!").

.decl inferred_type(id: number, type: irType<>)
inferred_type(id, $Integer()) :-
    vertex(id, "Literal", _, value), IS_INTEGER(value).
inferred_type(id, $Number()) :-
    vertex(id, "Literal", _, value), IS_NUMERIC(value), !IS_INTEGER(value).
inferred_type(id, $String()) :-
    vertex(id, "Literal", _, value), IS_STRING(value).
inferred_type(id, $Boolean()) :-
    vertex(id, "Literal", _, value), IS_BOOLEAN(value).
inferred_type(id, $Undefined()) :-
    vertex(id, "Literal", _, "undefined").
inferred_type(id, $Null()) :-
    vertex(id, "Literal", _, "null").

inferred_type(id, $Number()) :-
    vertex(id, kind, _, operator), match(".*Operation", kind), float_operator(operator).
inferred_type(id, $Integer()) :-
    vertex(id, kind, _, operator), match(".*Operation", kind), integer_operator(operator).
inferred_type(id, arg_type) :-
    vertex(id, kind, _, operator), match(".*Operation", kind), numeric_operator(operator),
    edge(id, arg, _, _), inferred_type(arg, arg_type).



inferred_type(id, type) :-
    vertex(id, "Phi", _, _), inferred_type(arg, type),
    (phi_args(id, arg, _) ; phi_args(id, _, arg)).

inferred_type(id, $Boolean()) :-
    vertex(id, "BinaryOperation", _, operator), comparison_operator(operator).

inferred_type(id, $Boolean()) :-
    vertex(id, kind, _, operator), match(".*Operation", kind), boolean_operator(operator).

inferred_type(param, @getFunctionParamType(function_type, index)) :-
    vertex(param, "Parameter", _, _),
    edge(symbol, param, _, index_string),
    IS_INTEGER(index_string),
    index = to_number(index_string),
    inferred_type(symbol, function_type).

inferred_type(id, @getFunctionRetType(function_type)) :-
    vertex(id, "Call", _, _),
    edge(id, callee, _, "callee"),
    inferred_type(callee, function_type).

inferred_type(symbol, @functionRetTemplate($Void())) :-
    vertex(symbol, "Symbol", _, name),
    function_return(name, ret),
    !edge(ret, _, _, "value").

inferred_type(symbol, @functionRetTemplate(ret_type)) :-
    vertex(symbol, "Symbol", _, name),
    function_return(name, ret),
    edge(ret, value, _, "value"),
    inferred_type(value, ret_type).

inferred_type(callee, @functionParamTemplate(param_type, to_number(index))) :-
    vertex(call, "Call", _, _),
    edge(call, callee, _, "callee"),
    edge(call, param, _, index),
    IS_NUMERIC(index),
    inferred_type(param, param_type).

inferred_type(callee, @functionParamTemplate($Undefined(), to_number(index))) :-
    vertex(call, "Call", _, _),
    edge(call, callee, _, "callee"),
    edge(callee, _, _, index),
    IS_NUMERIC(index),
    !edge(call, _, _, index).

inferred_type(symbol, $Function($Bottom(), nil)) :-
    vertex(call, "Call", _, _),
    edge(call, symbol, _, "callee"),
    vertex(symbol, "Symbol", _, _).


inferred_type(alloc, $Object($Bottom())) :-
    vertex(alloc, "Allocation", _, _),
    !edge(alloc, _, _, "callee").

inferred_type(load, @getElementType(type)) :-
    vertex(load, "Load", _, _),
    edge(load, object, _, "object"),
    inferred_type(object, type).

inferred_type(object, $Object(value_type)) :-
    vertex(store, "Store", _, _),
    edge(store, object, _, "object"),
    inferred_type(object, $Object($Bottom())),
    edge(store, value, _, "value"),
    inferred_type(value, value_type).

inferred_type(id, type) :-
    may_refer_to(id, to), inferred_type(to, type).


.decl missing_type(id: number)
missing_type(id) :-
    vertex(id, kind, category, _),
    category != "Control",
    kind != "Symbol",
    !inferred_type(id, _).

#include "libs/math.dl"
#include "libs/console.dl"
#include "libs/process.dl"
#include "libs/global.dl"
#include "libs/fs.dl"
#include "libs/performance.dl"

#include "string_method.dl"
#include "error.dl"

#include "accessors.dl"
