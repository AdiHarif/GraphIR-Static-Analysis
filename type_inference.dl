
#pragma once

#include "./graph_definitions.dl"
#include "./points_to.dl"
#include "./utilities.dl"

.decl numeric_operator(operator: symbol)
numeric_operator("+").
numeric_operator("-").
numeric_operator("*").
numeric_operator("/").
numeric_operator("%").
numeric_operator(">>").
numeric_operator(">>>").

.decl comparison_operator(operator: symbol)
comparison_operator("==").
comparison_operator("!=").
comparison_operator("<").
comparison_operator("<=").
comparison_operator(">").
comparison_operator(">=").

.decl inferred_type(id: number, type: symbol)
inferred_type(id, "number") :-
    vertex(id, "Literal", _, value), IS_NUMERIC(value).
inferred_type(id, "string") :-
    vertex(id, "Literal", _, value), IS_STRING(value).
inferred_type(id, "boolean") :-
    vertex(id, "Literal", _, value), IS_BOOLEAN(value).

inferred_type(id, "number") :-
    vertex(id, kind, _, operator), match(".*Operation", kind), numeric_operator(operator).
inferred_type(id, type) :-
    vertex(id, "Phi", _, _), inferred_type(arg, type),
    (phi_args(id, arg, _) ; phi_args(id, _, arg)).

inferred_type(id, "boolean") :-
    vertex(id, "BinaryOperation", _, operator), comparison_operator(operator).

inferred_type(id, "symbol") :- vertex(id, "Symbol", _, _).

inferred_type(id, type) :-
    vertex(id, "Parameter", _, _),
    function_parameter(function, id, index),
    function_parameters_type(function, index, type).

inferred_type(id, type) :-
    vertex(id, "Call", _, _),
    edge(id, symbol_id, _, "callee"), vertex(symbol_id, "Symbol", _, function),
    function_return_type(function, type).

.output inferred_type()
.output vertex
.output edge
.output function_return_type

inferred_type(id, type) :-
    vertex(id, "Allocation", _, _),
    edge(id, callee, _, "callee"),
    vertex(callee, "Symbol", _, type).

inferred_type(id, type) :-
    may_refer_to(id, to), inferred_type(to, type).

function_return_type(function, "undefined") :-
    vertex(id, "Return", _, _),
    function_return(function, id),
    !edge(id, _, _, "value").

function_return_type(function, type) :-
    vertex(id, "Return", _, _),
    function_return(function, id),
    edge(id, value, _, "value"), inferred_type(value, type).

function_parameters_type(function, index, type) :-
    vertex(call, "Call", _, _),
    edge(call, parameter, _, index), IS_NUMERIC(index),
    inferred_type(parameter, type),
    edge(call, callee, _, "callee"), vertex(callee, "Symbol", _, function).

.output inferred_type()

.decl missing_type(id: number)
missing_type(id) :-
    vertex(id, _, category, _),
    category != "Control",
    !inferred_type(id, _).

.output missing_type()
